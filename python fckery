                     Difference between Is and ==

An is expression evaluates to True if two variables point to the same      (identical) object.

An == expression evaluates to True if the objects referred to by the variables are equal (have the same contents).

                     JSON loads and dumps
loads converts json into directory

                     Behavior with mutable and immutable types:

For immutable types like integers, strings, and tuples, Python often caches small objects (like small integers and short strings). This can make is and == behave similarly in some cases because Python reuses the same object in memory for small values.

func(*args), func(**kwargs)

*args: Allows a function to accept any number of positional arguments. The arguments are passed as a tuple.

**kwargs: Allows a function to accept any number of keyword arguments. The arguments are passed as a dictionary.

f-strings (formatted string literals) are a way to embed expressions inside string literals in Python, using curly braces {}. They provide an easy and readable way to format strings dynamically.

There is a built-in function to list all the function names (or variable names) in a module. The dir() function:
Example: import platform
         x = dir(platform)
         
Many Exceptions
You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:

Example
Print one message if the try block raises a NameError and another for other errors:

try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")




Python Lambda Functions
Python Lambda Functions are anonymous functions means that the function is without a name. As we already know the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python. 

Python Lambda Function Syntax
Syntax: lambda arguments : expression


This function can have any number of arguments but only one expression, which is evaluated and returned.
One is free to use lambda functions wherever function objects are required.
You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression.
It has various uses in particular fields of programming, besides other types of expressions in functions.
Python Lambda Function Example
In the example, we defined a lambda function(upper) to convert a string to its upper case using upper().

This code defines a lambda function named upper that takes a string as its argument and converts it to uppercase using the upper() method. It then applies this lambda function to the string ‘GeeksforGeeks’ and prints the result


str1 = 'GeeksforGeeks'

upper = lambda string: string.upper()
print(upper(str1))



List Comprehension in Python

List comprehension is a way to create lists using a concise syntax. It allows us to generate a new list by applying an expression to each item in an existing iterable (such as a list or range). This helps us to write cleaner, more readable code compared to traditional looping techniques.

For example, if we have a list of integers and want to create a new list containing the square of each element, we can easily achieve this using list comprehension.


a = [2,3,4,5]

res = [val ** 2 for val in a]

print(res)

example 2: 

a = [1, 2, 3, 4, 5]

res = [val for val in a if val%2==0]

print(res)

is_even_list = [lambda arg=x: arg * 10 for x in range(1, 5)]
for item in is_even_list:
    print(item())
    
Lambda function with map: 

animals = ['dog', 'cat', 'parrot', 'rabbit']
upper = list(map(lambda x: x.upper(), animals))
print(upper)

lambda function with filter:

li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]

final_list = list(filter(lambda x: (x % 2 != 0), li))
print(final_list)


Roles of __init__.py in Django:

Package Recognition:

Just like in standard Python, the __init__.py file marks a directory as a package, allowing it to be imported as a module.



Project-level __init__.py:

In a Django project, the main project directory also contains an __init__.py. This file makes the project directory a package, enabling it to be imported and referenced in various settings or scripts.



classes:

The class creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object.





In Python, `self` is a conventional name used in instance methods within classes to represent the instance of the class itself. It is used to access variables, methods, and properties that belong to the instance.

### Key Points About `self`:

1. Represents the Instance:
   - `self` refers to the specific instance of the class on which a method is being called. This allows methods to operate on different instances.

2. Explicit Parameter:
   - In Python, `self` is explicitly passed as the first parameter to instance methods. This contrasts with some other languages like Java or C++, where the instance reference is implicit.
   
3. Accessing Attributes and Methods**:
   - You use `self` to access instance attributes and methods within the class.
   - Example:
     ```python
     class MyClass:
         def __init__(self, value):
             self.value = value

         def show_value(self):
             print(self.value)

     obj = MyClass(10)
     obj.show_value()  # Outputs: 10
     ```

4. Naming:
   - Although `self` is a convention, you can technically use any name for this parameter. However, using `self` is the standard and improves code readability.

5. Distinguishes Between Class and Instance Variables:
   - Using `self`, you can differentiate between instance variables and class variables.
   - Example:
     ```python
     class Example:
         class_var = 'I am a class variable'

         def __init__(self, instance_var):
             self.instance_var = instance_var

         def show_vars(self):
             print('Class var:', Example.class_var)
             print('Instance var:', self.instance_var)

     obj = Example('I am an instance variable')
     obj.show_vars()
     ```

# Why `self` is Important:
- It enables object-oriented programming by allowing each instance to maintain its state and behavior.
- It ensures that methods can modify the state of the instance they are called on, rather than affecting all instances of the class.

Understanding `self` is fundamental to working with classes and objects in Python, as it allows you to create and manipulate instance-specific data and behavior.


__init__() method
The __init__ method is similar to constructors in C++ and Java. Constructors are used to initializing the object’state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation. It runs as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object.


# Sample class with init method
class Person:

    # init method or constructor
    def __init__(self, name):
        self.name = name

    # Sample Method
    def say_hi(self):
        print('Hello, my name is', self.name)


p = Person('Nikhil')
p.say_hi()


Class and Instance Variables
Instance variables are for data, unique to each instance and class variables are for attributes and methods shared by all instances of the class. Instance variables are variables whose value is assigned inside a constructor or method with self whereas class variables are variables whose value is assigned in the class.


# Python3 program to show that the variables with a value
# assigned in the class declaration, are class variables and
# variables inside methods and constructors are instance
# variables.

# Class for Dog


class Dog:

    # Class Variable
    animal = 'dog'

    # The init method or constructor
    def __init__(self, breed, color):

        # Instance Variable
        self.breed = breed
        self.color = color


# Objects of Dog class
Rodger = Dog("Pug", "brown")
Buzo = Dog("Bulldog", "black")

print('Rodger details:')
print('Rodger is a', Rodger.animal)
print('Breed: ', Rodger.breed)
print('Color: ', Rodger.color)

print('\nBuzo details:')
print('Buzo is a', Buzo.animal)
print('Breed: ', Buzo.breed)
print('Color: ', Buzo.color)

# Class variables can be accessed using class
# name also
print("\nAccessing class variable using class name")
print(Dog.animal)


Benefits of inheritance are:

Inheritance allows you to inherit the properties of a class, i.e., base class to another, i.e., derived class. The benefits of Inheritance in Python are as follows:

It represents real-world relationships well.
It provides the reusability of a code. We don’t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.
It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.
Inheritance offers a simple, understandable model structure. 
Less development and maintenance expenses result from an inheritance. 





# count = 2

# print(f"{count+1}")

# Geek = {
#     "Name":"Ajs",
#     "Id":2
# }

# print(f"Id of {Geek['Name']} is {Geek['Id']}")

# str = 'agam'

# upper = lambda strr: str.upper()

# print(upper(str))

# a = [1, 2, 3, 4, 5]

# res = [val for val in a if val%2==0]

# print(res)

# animals = ['dog', 'cat', 'parrot', 'rabbit']
# upper = list(map(lambda x: x.upper(), animals))
# print(upper)




def decorator_created(func):
    def wrapper():
        print("yo execute me already pappy")
        return func();
    return wrapper

@decorator_created    
def func1():
    print("im the one that needs to be executed")
    
func1()
# executor = decorator_created(func1);
# executor();


Nested decorators: 
How several decorators are applied?
A function can be decorated multiple times. We need to define the decorator first that we want to wrap the output string with, and then apply them to the function using the ‘@’ . One simply needs to place the decorators above the desired function.

Syntax :

@function1
@function2
def function(name):
      print(f"{name}")
Nested decorators follow a bottom to top approach i.e the reverse order. It can be related to a construction of  building where we start the construction from the bottom (the ground) and then start building the floors.

Inheritance

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)
    
class Student(Person):
  pass


        
Iterator vs Iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.

All these objects have a iter() method which is used to get an iterator:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))


difference between dictionary and json

JSON: Strict format with double quotes around keys and string values; cannot contain Python-specific data types (e.g., tuples

dictionaries are Python-specific data structures, while JSON is a universal data format for transmitting data across different platforms and languages.
